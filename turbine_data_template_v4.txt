##############################################################################################################################################################################
# Tutorial on data entry methology:
# Python operators can be used at each definition, always following the proposed order.
# Each variable must be followed by an equal symbol and continue with the assigned value.
# Each pair variable-definition must be followed by a semicolon.
# When the read stream reaches "#" it jumps to the next line.
# When defining a variable does not apply, it must be assigned "None".
# Space character is ignored (not tab), therefore, when using list-comprehension, it needs to be indicated by "$".
# Units of variables to be entered must be: Kelvin, Pascals, degrees, meters/seconds.
##############################################################################################################################################################################
# First of all, it is defined the action to be executed or mode, using double or simple quotation marks.

# To be chosen between: 'process_nominal_values', 'solve', 'display_values', 'sweep_variable' and 'display_graphs_with_sweep_data'.
mode = 'sweep_variable';

# Additional information for 'sweep_variable' and 'display_graphs_with_sweep_data' modes:
var_to_sweep = 'p_inlet';    sweep_resolution = 80;    req_vars = None;   csv_filename_extension = 'sweeping_070723_v1.csv';
independent_variable = 'r_turbine';      dependent_variables = ['C', 'm_dot', 'eta_ss', 'P_total', 'P_total_ss', 'alfa', 'eta_TT', 'eta_TE'];
logic_limit_for_independent_variable = True;  # It limits the displayed values using as condition that global energy exchange is from the gas to the turbine.

# Any dependend and non dependend variable whose value depends on axial direction or on the step evaluated has to be added to the dictionary at the next line.
# Notice that it is not possible to have repeated keys in the dictionary and values need to be listed as follows.
# When last sentence applies to independent variable, it must be indicated the first one.
where_to_evaluate = {'C': {'step': [1, 2], 'point': [1, 3]}, 'alfa': {'step': [1, 2], 'point': [1, 3]}, 'eta_TT': {'step': [1, 2]}, 'eta_TE': {'step': [1, 2]}};

# In case it is necessary to plot any dependent variables together, all of them must be packaged as follows.
# In case variables that share a key are indicated, all previously chosen variables sharing the key will be represented together.
plot_together = [['C'],['alfa'], ['eta_TT', 'eta_TE'], ['P_total', 'P_total_ss']];
legend_location = 'lower right';    # See: https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html
##############################################################################################################################################################################
# Secondly, everything about the program configuration is defined:

iter_limit_at_inner_loops=5000;                     iter_limit_at_outer_loops=30;                        thermod_mode_in_gas_model_module = 'ig';
relative_error=1E-9;         ideal_gas=True;        chain_mode=False;        loss_model='Aungier';       n_steps=2;           jump=4.0;   
max_trend_changes=20;        T_nominal=1300;        p_nominal=390_000;       n_rpm_nominal=25_500;       inlet_velocity_range=[0.01, 140.69];
preloading_for_small_input_deviations = False;      resolution_for_small_input_deviations = 500; 

# preloading_for_small_input_deviations: if true, there will be done several evaluations, in order to being able to approximate the solution directly when in 'solve' mode.
##############################################################################################################################################################################
# The geometry is then defined with all the necessary parameters, depending on the loss model used.
# More information on the variables to be defined can be found in the code documentation.

stator_leading_edge_angle = [0, 35];                        stator_blade_curvature = [60, 95];                                    stator_trailing_edge_angle = None;
rotor_leading_edge_angle = [20, 15];                        rotor_blade_curvature = [90, 75];                                     rotor_trailing_edge_angle = None;
tip_radius = 0.67;                                          hub_radius = [0.640, 0.639, 0.631, 0.629];                            mean_radius = $[0.235+hr*0.5 for hr in hub_radius];
heights = $[0.025] + [0.67-hr for hr in hub_radius];        areas = None;                                                         chord = [0.030, 0.030, 0.031, 0.035];
maximum_thickness = $[0.12*b for b in chord];               pitch = [0.030, 0.030, 0.025, 0.025];                                 outlet_thickness = $[0.003*c/0.030 for c in chord];
blade_opening = [0.0135, 0.0135, 0.013, 0.013];             blade_mean_radius_of_curvature = 0.020;                               tip_clearance = [0.001, 0.001, 0.0007, 0.0007];
chord_z = $[0.85 * b for b in chord];                       wire_diameter = None;                                                 lashing_wires = None;
radial_clearance = False;                                   blade_roughness_peak_to_valley = $[0.000035 for _ in chord];          design_factor = 0.67;
gauge_adimensional_position = 0.8;                          N_blades = None;
##############################################################################################################################################################################
# Finally, only the values that will restrict the operating point to be evaluated are defined, the rest are assigned "None":

T_inlet=1300;     p_inlet=[350_000, 200_000];     rpm=2_000;     p_outlet=120_000;     mass_flow=None;     axial_inlet_velocity=None;     reference_inlet_velocity=140;
##############################################################################################################################################################################